

1) Python Dict, List, Iterable Functions, Deque, Yield

* LIST and LIST COMPREHENSIONS: mutable, homogeneous
http://stackoverflow.com/questions/1708510/python-list-vs-tuple-when-to-use-each
https://docs.python.org/2/tutorial/datastructures.html
*** PREFER xrange dynamic generation to pre-allocation of full range!
for i in xrange(start, end, step):
for i in xrange(MAX_LEN):
*** see FindRectangles.py

GOTCHAs:
- ALLOCATION
  x = [None] * len(menu)
- step can be -1 to go BACK
- xrange generates on-the-fly vs pre-allocation
- MAX_LEN only means index 0 to MAX_LEN-1
- end is ONE-PAST end index specifically

* TUPLE: immutable, heterogeneous
*** see SortTests.py

atuple[0], atuple[1]
use as RETURN of multiple args from def someFunction():

* DICT:
https://docs.python.org/2/tutorial/datastructures.html

* FUNCTIONAL programminag and  ITERABLE, LAMBDAs:
https://docs.python.org/2/library/functions.html]
http://stackoverflow.com/questions/12264834/what-is-the-difference-for-python-between-lambda-and-regular-function
http://stackoverflow.com/questions/10345278/understanding-lambda-in-python-and-using-it-to-pass-multiple-arguments

* DEQUE:
https://docs.python.org/2/library/collections.html#collections.deque
- double-link makes REMOVE faster as no prior-pointer tracking needed
- for STACK:  .append() right; pop() right; SAME SIDE
- for QUEUE:  .append() right; popleft() left; DIFFERENT SIDE

* FUNCTIONAL and YIELD vs GENERATORS
https://docs.python.org/2/howto/functional.html
http://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do-in-python
http://stackoverflow.com/questions/3013449/list-filtering-list-comprehension-vs-lambda-filter

=> GENERATORs for allocate-on-fly; not FULL COLLECTION allocation as ListComp;
              HOLDs LOCAL STATE over SEVERAL function calls; or RESUMEABLE functions

def generate_ints(N):
    for i in range(N):
        yield i

gen = generate_ints(3)
- gen
- gen.next()
0
- gen.next()
1
- gen.next()
2


EXAMPLE1:
*** MAP

def upper(s):
...     return s.upper()

map(upper, ['sentence', 'fragment'])
['SENTENCE', 'FRAGMENT']

[upper(s) for s in ['sentence', 'fragment']]
['SENTENCE', 'FRAGMENT']

EXAMPLE2:
*** FILTER

def is_even(x):
...     return (x % 2) == 0

filter(is_even, range(10))
[0, 2, 4, 6, 8]

[x for x in range(10) if is_even(x)]
[0, 2, 4, 6, 8]

* DEEP COPY vs SHALLOW
- shallow vs deepcopy
https://docs.python.org/2/library/copy.html
http://stackoverflow.com/questions/2612802/how-to-clone-or-copy-a-list
- list find item in
# http://stackoverflow.com/questions/176918/finding-the-index-of-an-item-given-a-list-containing-it-in-python

* CONCURRENCY
https://pymotw.com/2/Queue/
https://www.troyfawkes.com/learn-python-multithreading-queues-basics/

* COLLECTIONS/COMPARISONs
http://stackoverflow.com/questions/11215851/python-equivalent-of-javas-compareto
http://stackoverflow.com/questions/7803121/in-python-heapq-heapify-doesnt-take-cmp-or-key-functions-as-arguments-like-sor
https://docs.python.org/2/library/collections.html
http://stackoverflow.com/questions/5292303/how-does-tuple-comparison-work-in-python
http://stackoverflow.com/questions/7803121/in-python-heapq-heapify-doesnt-take-cmp-or-key-functions-as-arguments-like-sor
http://javaconceptoftheday.com/java-priorityqueue-example/
http://www.bogotobogo.com/python/python_PriorityQueue_heapq_Data_Structure.php
http://stackoverflow.com/questions/407734/a-generic-priority-queue-for-python
https://docs.python.org/2.7/library/queue.html#Queue.PriorityQueue
https://docs.python.org/3/_sources/library/heapq.


* COMPARATORS

GOTCHA:  different from JAVA where == is reference; and .equals() is DEEP
http://stackoverflow.com/questions/132988/is-there-a-difference-between-and-is-in-python
'is' is reference vs == is DEEP equals

>>> a = [1, 2, 3]
>>> b = a
>>> b is a
True
>>> b == a
True
>>> b = a[:]
>>> b is a
False
>>> b == a
True

http://javaconceptoftheday.com/java-priorityqueue-example/
http://gerg.ca/blog/post/2012/python-comparison/
http://stackoverflow.com/questions/5292303/how-does-tuple-comparison-work-in-python
http://www.bogotobogo.com/python/python_PriorityQueue_heapq_Data_Structure.php


GOTCHA:  DataItem class implements int compareTo(DataItem other)
         on itself, for NATURAL ordering

         HOWEVER, if number of fields considered for comparison differs from equals or hashcode;
         then implement Comparator function on DataItem and pass that into PriorityQueue collection SORT

def __cmp__(self,other):
    if self.value < other.value:
        return -1
    elif self.value > other.value:
        return 1
    else:return 0

**** KEY POINT:  - Comparator is with LARGE datastructure; which compares successive elements; and can be used for
                 applying DIFFERENT (non-default) SORT strategies to an item collection COLLECTION

                 - __cmp__ or compareTo is on COMPLEX-NON-PRIMITIVE element to support Ordered Collections;
                   AND is invoked implictly in Python; can also be simulated with field-by-field

http://stackoverflow.com/questions/4011560/priority-queue-in-java
http://stackoverflow.com/questions/1168348/java-serialization-readobject-vs-readresolve
http://stackoverflow.com/questions/11215851/python-equivalent-of-javas-compareto
- see MFACache.py

# SORT (LIST works OK for BASICs, otherwise not prettiest
# LIMITATION - has to be primitive integer ordering key
http://pythoncentral.io/how-to-sort-a-list-tuple-or-object-with-sorted-in-python/
https://www.tutorialspoint.com/python/list_sort.htm
http://www.bogotobogo.com/python/python_PriorityQueue_heapq_Data_Structure.php

# ITERATORS
itertools
http://stackoverflow.com/questions/17722989/python-how-do-i-use-itertools

* LAMBDAs
# http://stackoverflow.com/questions/890128/why-are-python-lambdas-useful
# http://stackoverflow.com/questions/29767310/pythons-lambda-with-no-variables
# http://stackoverflow.com/questions/12264834/what-is-the-difference-for-python-between-lambda-and-regular-function

GOTCHAs:
* Python has no function return type; and uses
def xyx():
- MATRIX/Spiraller

* Python has no parameterization of Function types vs Scala
- http://alvinalexander.com/scala/passing-function-to-function-argument-anonymous

* STRINGS
SLICE
a[start:end] # items start through end-1 (ie NOT inclusive of END)
a[start:]    # items start through the rest of the array
a[:end]      # items from the beginning through end-1
a[:]         # a copy of the whole array
a[start:end:step] #
a[-1]   # last item
x[::-1] # reverse
http://stackoverflow.com/questions/509211/explain-pythons-slice-notation

GOTCHA:
   [startIdx:beyondEndIdx by 1!]

SPLIT:
  string = "this is a string"
  for word in string.split():
    print (word)

FORMAT:
http://stackoverflow.com/questions/5082452/python-string-formatting-vs-format
   print "{0}:{1}".format(suffix, similarity)

ITERATE:
http://stackoverflow.com/questions/538346/iterating-over-a-string
for achar in "somestring":
    # do something with achar

BUILT-IN FUNCTIONS:
https://docs.python.org/2/library/functions.html

2) EXAMPLES:

* STRINGS

SLICE
a[start:end] # items start through end-1 (ie NOT inclusive of END)
a[start:]    # items start through the rest of the array
a[:end]      # items from the beginning through end-1
a[:]         # a copy of the whole array
a[start:end:step] #
a[-1]   # last item
x[::-1] # reverse
http://stackoverflow.com/questions/509211/explain-pythons-slice-notation

GOTCHA:
   [startIdx:beyondEndIdx by 1!]

SPLIT:
  string = "this is a string"
  for word in string.split():
    print (word)

FORMAT:
http://stackoverflow.com/questions/5082452/python-string-formatting-vs-format
   print "{0}:{1}".format(suffix, similarity)

ITERATE:
http://stackoverflow.com/questions/538346/iterating-over-a-string
for achar in "somestring":
    # do something with achar

- StringSimilarSuffix

* DICT/MAP and LIST:
GOTCHA:
- map is functional construct on Iterable
.get(key,defaultVal) or KeyError if key not found
- BuildTree


* LIST COMPREHENSIONS, TUPLES:
- FindRectangles

* MATRIX:
- Spiraller

* TREE:
- BST

* HEAP/ARRAY:
- binheap

* GRAPH:
- djikstra

* INSPECTION:
http://stackoverflow.com/questions/1006169/how-do-i-look-inside-a-python-object
- djikstra

* EXCEPTIONS:
http://stackoverflow.com/questions/9555133/e-printstacktrace-equivalent-in-python
- binheap

* STDIO:
- CountMatrixPathsDP

* FILE-IO:
- Section 7.2 here:
https://docs.python.org/2/tutorial/inputoutput.html
- Exceptions
http://stackoverflow.com/questions/8380006/file-open-function-with-try-except-python-2-7-1

* MODULES:
(see __init__.py)
import from

3) RANDOM

* elif
https://www.tutorialspoint.com/python/python_if_else.htm
* use __init__() for ctor; and (self, ...) for def class
* None instead of Null
* pass (no-op)


4) SUCKY LANGUAGE FEATURES; I need to workaround:

* switch SUCKs, need simulation w Dictionary lambdas
https://codingair.wordpress.com/2014/02/11/use-python-to-do-switch-case/

* collections SUCK, need third-party PriorityQueue, Heap, Graph, Vertex
https://pypi.python.org/pypi/pythonds

* sorting collections SUCK a bit:
http://pythoncentral.io/how-to-sort-a-list-tuple-or-object-with-sorted-in-python/
- /QUEUE/MFACache

5) OOP

NAMING conventions
- no access level keywords, setters, getters -- all public
  - use _ for 'convention' of private access
  - use __ for 'final, non-overrideable' method
  - use __x__ for Python-internal call, like comparator
  *** note ANYTHING with _ will NOT get exposed via import from package module designated with __init__.py!
  http://stackoverflow.com/questions/1301346/what-is-the-meaning-of-a-single-and-a-double-underscore-before-an-object-name

- no implicit this, use EXPLICIT this
- no ctor, use __init__ and start assigning stuff to this.itemA to inititialize

- http://sthurlow.com/python/lesson08/

* lookup info.txt in OOP folder!

6) DEBUGGING

- INTROSPECTION OF LIBRARY CLASS
* http://stackoverflow.com/questions/1006169/how-do-i-look-inside-a-python-object

- TYPE and CAST
* print type(x)
* int(x)

- FORMAT PRINT
*  print "{0}:{1}".format(suffix, similarity)

- OBJECT CONTENTS
*  def __repr__(self):
       return "({}:{})".format(self.menu_id, self.cost)

=> see SortTests.py

7) WHAT's GOOD with PYTHON

* https://www.youtube.com/watch?v=NfngrdLv9ZQ#t=1716

8) DP

- go thru ALL of the DP folder examples!

- stackCubes.py, sumIntegers.py, MakeMinChange.py etc

9) PERFORMANCE MEASUREMENT!

- append() vs extend()
- http://stackoverflow.com/questions/14446128/python-append-vs-extend-efficiency

