

1) Python Dict, List, Iterable Functions, Deque, Yield

* LIST: mutable, homogeneous
http://stackoverflow.com/questions/1708510/python-list-vs-tuple-when-to-use-each
https://docs.python.org/2/tutorial/datastructures.html
for i in xrange(start, end, step):
for i in xrange(MAX_LEN):

GOTCHAs:
- step can be -1 to go BACK
- xrange generates on-the-fly vs pre-allocation
- MAX_LEN only means index 0 to MAX_LEN-1
- end is end index specifically

* TUPLE: immutable, heterogeneous

atuple[0], atuple[1]
use as RETURN of multiple args from def someFunction():

* DICT:
https://docs.python.org/2/tutorial/datastructures.html

* FUNCTIONS on ITERABLE:
https://docs.python.org/2/library/functions.html#map

* DEQUE:
https://docs.python.org/2/library/collections.html#collections.deque
- double-link makes REMOVE faster as no prior-pointer tracking needed
- for STACK:  .append() right; pop() right; SAME SIDE
- for QUEUE:  .append() right; popleft() left; DIFFERENT SIDE

* YIELD vs GENERATORS
http://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do-in-python

2) EXAMPLES:

* STRINGS

SLICE
a[start:end] # items start through end-1
a[start:]    # items start through the rest of the array
a[:end]      # items from the beginning through end-1
a[:]         # a copy of the whole array
a[start:end:step] #
a[-1]   # last item
x[::-1] # reverse
http://stackoverflow.com/questions/509211/explain-pythons-slice-notation

GOTCHA:
   [startIdx:beyondEndIdx by 1!]

SPLIT:
  string = "this is a string"
  for word in string.split():
    print (word)

FORMAT:
http://stackoverflow.com/questions/5082452/python-string-formatting-vs-format
   print "{0}:{1}".format(suffix, similarity)

ITERATE:
http://stackoverflow.com/questions/538346/iterating-over-a-string
for achar in "somestring":
    # do something with achar

- StringSimilarSuffix

* DICT/MAP and LIST:
GOTCHA:
- map is functional construct on Iterable
.get(key,defaultVal) or KeyError if key not found
- BuildTree

* LIST COMPREHENSIONS, TUPLES:
- FindRectangles

* MATRIX:
- Spiraller

* TREE:
- BST

* HEAP/ARRAY:
- binheap

* GRAPH:
- djikstra

* INSPECTION:
http://stackoverflow.com/questions/1006169/how-do-i-look-inside-a-python-object
- djikstra

* EXCEPTIONS:
http://stackoverflow.com/questions/9555133/e-printstacktrace-equivalent-in-python
- djikstra

* STDIO:
- CountMatrixPathsDP

* FILE-IO:
- Section 7.2 here:
https://docs.python.org/2/tutorial/inputoutput.html
- Exceptions
http://stackoverflow.com/questions/8380006/file-open-function-with-try-except-python-2-7-1

3) RANDOM

* elif
https://www.tutorialspoint.com/python/python_if_else.htm
* use __init__() for ctor; and (self, ...) for def class
* None
* pass (no-op)
* no accessors, use __ instead

4) SUCKY LANGUAGE FEATURES, need HELP with

* switch SUCKs, need simulation w Dictionary lambdas
https://codingair.wordpress.com/2014/02/11/use-python-to-do-switch-case/

* collections SUCK, need third-party PriorityQueue, Heap, Graph, Vertex
https://pypi.python.org/pypi/pythonds

5) OOP

- http://sthurlow.com/python/lesson08/

* lookup info.txt in OOP folder!

6) DEBUGGING

- INTROSPECTION OF LIBRARY CLASS
* http://stackoverflow.com/questions/1006169/how-do-i-look-inside-a-python-object

- TYPE and CAST
* print type(x)
* int(x)

7) WHAT's GOOD with PYTHON

* https://www.youtube.com/watch?v=NfngrdLv9ZQ#t=1716